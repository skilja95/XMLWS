
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package rs.ac.uns.ftn.banka;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.jdbc.JdbcConnectionSource;
import com.j256.ormlite.table.TableUtils;

import dbModels.BankaDB;
import dbModels.KlijentDB;
import dbModels.NalogZaPrenosDB;
import dbModels.StavkaDB;
import rs.ac.uns.ftn.xmlws.Status;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2017-06-19T20:31:52.908+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "BankaPort",
                      targetNamespace = "http://www.ftn.uns.ac.rs/banka",
                      //wsdlLocation = "/home/igor/Documents/gitRepos/XMLWS/Banka/Banka/WEB-INF/wsdl/Banka.wsdl",
                      endpointInterface = "rs.ac.uns.ftn.banka.Banka")
                      
public class BankaImpl implements Banka {
	
	private final static String DATABASE_URL = "jdbc:mysql://localhost:3306/xmlbanka";

    private static final Logger LOG = Logger.getLogger(BankaImpl.class.getName());
    
    private Dao<BankaDB, Integer> bankaDAO;
	private Dao<KlijentDB, Integer> klijentDAO;
	private Dao<StavkaDB, Integer> stavkaDAO;
	private Dao<NalogZaPrenosDB, Integer> nzpDAO;
    
    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiNalogZaPlacanje(rs.ac.uns.ftn.nalogzaprenos.NalogZaPrenos  nalogZaPrenos )*
     */
    public rs.ac.uns.ftn.xmlws.Status primiNalogZaPlacanje(rs.ac.uns.ftn.nalogzaprenos.NalogZaPrenos nalogZaPrenos) { 
        LOG.info("Executing operation primiNalogZaPlacanje");
        //System.out.println(nalogZaPrenos);
        JdbcConnectionSource connectionSource = null;
        try {
        	//System.out.println("NZP: "+nalogZaPrenos.getDuznik());
        	//System.out.println("IZNOS: "+nalogZaPrenos.getPodaciOUplati().getIznos());
        	connectionSource = new JdbcConnectionSource(DATABASE_URL,"root","cuko");
        	bankaDAO = DaoManager.createDao(connectionSource, BankaDB.class);
			klijentDAO = DaoManager.createDao(connectionSource, KlijentDB.class);
			stavkaDAO = DaoManager.createDao(connectionSource, StavkaDB.class);
			nzpDAO = DaoManager.createDao(connectionSource, NalogZaPrenosDB.class);
			
			TableUtils.createTableIfNotExists(connectionSource, BankaDB.class);
			TableUtils.createTableIfNotExists(connectionSource, KlijentDB.class);
			TableUtils.createTableIfNotExists(connectionSource, StavkaDB.class);
			TableUtils.createTableIfNotExists(connectionSource, NalogZaPrenosDB.class);
        	
        	ArrayList<KlijentDB> sviKlijenti = (ArrayList<KlijentDB>) klijentDAO.queryForAll();
        	
        	System.out.println("UCITALO SVE KLIJENTE IZ BAZE");
        	
        	KlijentDB klDuznik =null;
        	
        	KlijentDB klPrimaoc = null;
        	
        	for(KlijentDB kl:sviKlijenti)
        	{
        		if(kl.getBrojRacuna().equals(nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojRacuna()))
        		{
        			klDuznik=kl;
        			break;
        		}
        	}
        	for(KlijentDB kl:sviKlijenti)
        	{
        		if(kl.getBrojRacuna().equals(nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojRacuna()))
        		{
        			klPrimaoc=kl;
        			break;
        		}
        	}
        	
        	if(klDuznik!=null && klPrimaoc!=null)
        	{
        		System.out.println("OBA RACUNA SU REGISTROVANA! ");
        	}
        	else
        	{
        		System.out.println("JEDAN OD RACUNA ILI OBA NISU UOPSTE REGISTROVANI");
        		rs.ac.uns.ftn.xmlws.Status _return = new Status();
                _return.setStatusCode(404);
                _return.setStatusText("RACUN/I NIJE/SU PRONADJEN/I");
                return _return;
        	}
        	
        	java.util.Date dtNaloga = nalogZaPrenos.getPodaciOUplati().getDatumNaloga().toGregorianCalendar().getTime();
        	java.util.Date dtValute = nalogZaPrenos.getPodaciOUplati().getDatumValute().toGregorianCalendar().getTime();
        	
        	
        	// OPPOSITE : ...
        	// NOW DATE TO XMLGREGORIAN...something
        	/*
        	GregorianCalendar c = new GregorianCalendar();
        	c.setTime(yourDate);
        	XMLGregorianCalendar date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
        	*/
        	
        	//System.out.println(" ");
        	

        	NalogZaPrenosDB nzpdb = new NalogZaPrenosDB(nalogZaPrenos.getIdPoruke(),
        			nalogZaPrenos.getDuznik(),nalogZaPrenos.getSvrhaPlacanja(),
        			nalogZaPrenos.getPrimalac(),nalogZaPrenos.getPodaciOUplati().getOznakaValute(),
        			nalogZaPrenos.getPodaciOUplati().getIznos().doubleValue(),
        			nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojRacuna(),
        			nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojModela().intValue(),
        			nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getPozivNaBroj(),
        			nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojRacuna(),
        			nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojModela().intValue(),
        			nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getPozivNaBroj(),
        			nalogZaPrenos.getPodaciOUplati().isHitno(),
        			dtValute,
        			dtNaloga,
        			false);
        	
        	nzpDAO.create(nzpdb);
        	
        	
        	if(klDuznik.getBanka().getId()==klPrimaoc.getBanka().getId())
        	{
        		System.out.println("RACUNI SU U ISTOJ BANCI! ===========");
        		
        		ArrayList<StavkaDB> sveStavke = (ArrayList<StavkaDB>) stavkaDAO.queryForAll();
        		
        		ArrayList<StavkaDB> stavkeDuznika = new ArrayList<StavkaDB>();
        		ArrayList<StavkaDB> stavkePrimaoca = new ArrayList<StavkaDB>();
        		
        		StavkaDB zadnjaStavkaDuznika=null;
        		StavkaDB zadnjaStavkaPrimaoca=null;
        		
        		double prethodnoStanjeZaDuznika=0;
        		double prethodnoStanjeZaPrimaoca=0;
        		
        		for(StavkaDB st : sveStavke)
        		{
        			if(st.getKlijent().getBrojRacuna().equals(klDuznik.getBrojRacuna()))
        			{
        				stavkeDuznika.add(st);
        			}
        			if(st.getKlijent().getBrojRacuna().equals(klPrimaoc.getBrojRacuna()))
        			{
        				stavkePrimaoca.add(st);
        			}
        		}
        		
        		if(stavkePrimaoca.size()!=0)
        		{
        			StavkaDB maxStavka=stavkePrimaoca.get(0);
        			
        			for(StavkaDB st: stavkePrimaoca)
        			{
        				if(st.getId()>maxStavka.getId())
        				{
        					maxStavka=st;
        				}
        			}
        			
        			prethodnoStanjeZaPrimaoca=maxStavka.getTrenutnoStanje();
        		}

        		if(stavkeDuznika.size()!=0)
        		{
        			StavkaDB maxStavka=stavkeDuznika.get(0);
        			
        			for(StavkaDB st: stavkeDuznika)
        			{
        				if(st.getId()>maxStavka.getId())
        				{
        					maxStavka=st;
        				}
        			}
        			
        			prethodnoStanjeZaPrimaoca=maxStavka.getTrenutnoStanje();
        		}
        		
        		double izn = nalogZaPrenos.getPodaciOUplati().getIznos().doubleValue();
        		
        		StavkaDB stavkaDuznika = new StavkaDB(nalogZaPrenos.getDuznik(),
        				nalogZaPrenos.getSvrhaPlacanja(),nalogZaPrenos.getPrimalac(),
        				nalogZaPrenos.getPodaciOUplati().getOznakaValute(),
        				nalogZaPrenos.getPodaciOUplati().getIznos().doubleValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojRacuna(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojModela().intValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getPozivNaBroj(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojRacuna(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojModela().intValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getPozivNaBroj(),
        				dtValute,
        				dtNaloga,
        				"-",prethodnoStanjeZaDuznika,prethodnoStanjeZaDuznika-izn,klDuznik);
        		
        		StavkaDB stavkaPrimaoca = new StavkaDB(nalogZaPrenos.getDuznik(),
        				nalogZaPrenos.getSvrhaPlacanja(),nalogZaPrenos.getPrimalac(),
        				nalogZaPrenos.getPodaciOUplati().getOznakaValute(),
        				nalogZaPrenos.getPodaciOUplati().getIznos().doubleValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojRacuna(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getBrojModela().intValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunDuznika().getPozivNaBroj(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojRacuna(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getBrojModela().intValue(),
        				nalogZaPrenos.getPodaciOUplati().getRacunPoverioca().getPozivNaBroj(),
        				dtValute,
        				dtNaloga,
        				"+",prethodnoStanjeZaPrimaoca,prethodnoStanjeZaPrimaoca+izn,klPrimaoc);
        		
        		stavkaDAO.create(stavkaDuznika);
        		stavkaDAO.create(stavkaPrimaoca);
        		
        		ArrayList<NalogZaPrenosDB> sviNzp = (ArrayList<NalogZaPrenosDB>) nzpDAO.queryForAll();
        		
        		NalogZaPrenosDB nzpZaUpdate=null;
        		
        		for(NalogZaPrenosDB nzpdbx : sviNzp)
        		{
        			if(nzpdbx.getIdPoruke().equals(nalogZaPrenos.getIdPoruke()))
        			{
        				nzpZaUpdate = nzpdbx;
        				break;
        			}
        		}
        		
        		if(nzpZaUpdate!=null)
        		{
        			nzpZaUpdate.setObradjeno(true);
        			nzpDAO.update(nzpZaUpdate);
        		}
        		else
        		{
        			System.out.println("IZ NEKOG RAZLOGA NE MOZE DA NADJE NZP KOJI JE MALOPRIJE UPISAO .... cudno zar ne?");
        		}
        		
        		
        		rs.ac.uns.ftn.xmlws.Status _return = new Status();
                _return.setStatusCode(200);
                _return.setStatusText("OK");
                return _return;
        		
        	}
        	else
        	{
        		System.out.println("RACUNI SU U RAZLICITIM BANKAMA! =======");
        		
        		if(nalogZaPrenos.getPodaciOUplati().isHitno()==true || nalogZaPrenos.getPodaciOUplati().getIznos().compareTo(BigDecimal.valueOf(250000))==1 || nalogZaPrenos.getPodaciOUplati().getIznos().compareTo(BigDecimal.valueOf(250000))==0 )
        		{
        			System.out.println(" HITNO ILI VECE OD 250000, DAKLE RTGS TRANSFER! =====");
        			//TODO: Ne zaboraviti staviti da je obradjeno!
        			
        		}
        		else
        		{
        			System.out.println(" CLEARING SERVIS CE DA OBAVI OVO! =================");
        			
        			
        		}
        	}
        	
        	
            rs.ac.uns.ftn.xmlws.Status _return = new Status();
            _return.setStatusCode(200);
            _return.setStatusText("OK");
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#odradiClearing(*
     */
    public rs.ac.uns.ftn.xmlws.Status odradiClearing() { 
        LOG.info("Executing operation odradiClearing");
        
        
        try{
        	JdbcConnectionSource connectionSource = null;
        	connectionSource = new JdbcConnectionSource(DATABASE_URL,"root","cuko");
        	
        	bankaDAO = DaoManager.createDao(connectionSource, BankaDB.class);
			klijentDAO = DaoManager.createDao(connectionSource, KlijentDB.class);
			stavkaDAO = DaoManager.createDao(connectionSource, StavkaDB.class);
			nzpDAO = DaoManager.createDao(connectionSource, NalogZaPrenosDB.class);
			
			TableUtils.createTableIfNotExists(connectionSource, BankaDB.class);
			TableUtils.createTableIfNotExists(connectionSource, KlijentDB.class);
			TableUtils.createTableIfNotExists(connectionSource, StavkaDB.class);
			TableUtils.createTableIfNotExists(connectionSource, NalogZaPrenosDB.class);
        }
        catch(Exception e)
        {
        	e.printStackTrace();
        }
        /*
        JdbcConnectionSource connectionSource = null;
		try {
			// create our data source
			connectionSource = new JdbcConnectionSource(DATABASE_URL,"root","cuko");
			// setup our database and DAOs
			//setupDatabase(connectionSource);
			// read and write some data
			//readWriteData();
			System.out.println("\n\nIt seems to have worked\n\n");
			System.out.println("OVO DRUGO NESTO");
			
			bankaDAO = DaoManager.createDao(connectionSource, BankaDB.class);
			klijentDAO = DaoManager.createDao(connectionSource, KlijentDB.class);
			
			TableUtils.createTableIfNotExists(connectionSource, BankaDB.class);
			TableUtils.createTableIfNotExists(connectionSource, KlijentDB.class);
			
			
			
			
			BankaDB bdb1 = new BankaDB("B1","BJEDRS22","111111111111111111");
			bankaDAO.create(bdb1);
			
			BankaDB bdb2 = new BankaDB("B2","BDVARS22","222222222222222222");
			bankaDAO.create(bdb2);
			
			ArrayList<BankaDB> sveBanke=(ArrayList<BankaDB>) bankaDAO.queryForAll();
			
			for(BankaDB bdb : sveBanke)
			{
				System.out.println("BANKA: id="+bdb.getId()+" , naziv: "+bdb.getNaziv());
			}
			
			
			KlijentDB kdb1 = new KlijentDB("Firma1","100000000000000000",bankaDAO.queryForId(1),200);
			KlijentDB kdb2 = new KlijentDB("Firma2","200000000000000000",bankaDAO.queryForId(2),500);
			KlijentDB kdb3 = new KlijentDB("Firma3","300000000000000000",bankaDAO.queryForId(1),100);
			KlijentDB kdb4 = new KlijentDB("Firma4","400000000000000000",bankaDAO.queryForId(2),1200);
			
			
			klijentDAO.create(kdb1);
			klijentDAO.create(kdb2);
			klijentDAO.create(kdb3);
			klijentDAO.create(kdb4);
			
			ArrayList<KlijentDB> sviKlijenti = (ArrayList<KlijentDB>) klijentDAO.queryForAll();
			
			for(KlijentDB kdb : sviKlijenti)
			{
				System.out.println("KLIJENT: "+kdb.getIme()+", Banka: "+kdb.getBanka().getId());
			}
			
			connectionSource.close();
		}
		catch(Exception e)
		{
			System.out.println("NESTO JE VRISNULO");
			e.printStackTrace();
		}
		finally {
			 //destroy the data source which should close underlying connections
			//if (connectionSource != null) {
				//connectionSource.close();
		}
		
		*/
        try {

        	
        	
        	
        	
            rs.ac.uns.ftn.xmlws.Status _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiZahtevZaIzvod(rs.ac.uns.ftn.zahtevzaizvod.ZahtevZaIzvod  zahtevZaIzvod )*
     */
    public rs.ac.uns.ftn.presek.Presek primiZahtevZaIzvod(rs.ac.uns.ftn.zahtevzaizvod.ZahtevZaIzvod zahtevZaIzvod) { 
        LOG.info("Executing operation primiZahtevZaIzvod");
        System.out.println(zahtevZaIzvod);
        try {
            rs.ac.uns.ftn.presek.Presek _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiMT910(rs.ac.uns.ftn.mt90010.TMT9  mt910 )*
     */
    public rs.ac.uns.ftn.xmlws.Status primiMT910(rs.ac.uns.ftn.mt90010.TMT9 mt910) { 
        LOG.info("Executing operation primiMT910");
        System.out.println(mt910);
        try {
            rs.ac.uns.ftn.xmlws.Status _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiMT900(rs.ac.uns.ftn.mt90010.TMT9  mt900 )*
     */
    public rs.ac.uns.ftn.xmlws.Status primiMT900(rs.ac.uns.ftn.mt90010.TMT9 mt900) { 
        LOG.info("Executing operation primiMT900");
        System.out.println(mt900);
        try {
            rs.ac.uns.ftn.xmlws.Status _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiMT102(rs.ac.uns.ftn.mt102.Mt102  mt102 )*
     */
    public rs.ac.uns.ftn.xmlws.Status primiMT102(rs.ac.uns.ftn.mt102.Mt102 mt102) { 
        LOG.info("Executing operation primiMT102");
        System.out.println(mt102);
        try {
            rs.ac.uns.ftn.xmlws.Status _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see rs.ac.uns.ftn.banka.Banka#primiMT103(rs.ac.uns.ftn.mt103.MT103  mt103 )*
     */
    public rs.ac.uns.ftn.xmlws.Status primiMT103(rs.ac.uns.ftn.mt103.MT103 mt103) { 
        LOG.info("Executing operation primiMT103");
        System.out.println(mt103);
        try {
            rs.ac.uns.ftn.xmlws.Status _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
